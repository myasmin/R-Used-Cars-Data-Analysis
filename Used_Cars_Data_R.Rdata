{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Used Cars Data.R",
      "provenance": [],
      "authorship_tag": "ABX9TyNdLgAYWVKIJp0gwIEjwhZv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/myasmin/Used-Cars-Data-Analysis/blob/master/Used_Cars_Data_R.Rdata\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i2HCQ47ImHE9"
      },
      "source": [
        "rm(list=ls())\n",
        "setwd(\"D:/R\")\n",
        "library(tidyverse)\n",
        "library(plotly)\n",
        "require(forcats)\n",
        "\n",
        "######################## Import Data from CSV file ########################\n",
        "\n",
        "vehicle <- read_csv(\"D:/Documents/Used cars data from craigslist/craigslistVehicles.csv\")\n",
        "slice(vehicle,1:10)\n",
        "\n",
        "vehicle %>% \n",
        "           slice(1:10)%>% \n",
        "           summarise()\n",
        "\n",
        "rawdata <- vehicle %>%\n",
        "  select( -c(url , city_url, title_status,VIN, image_url))\n",
        "\n",
        "####### EDA of All Variables \n",
        "\n",
        "cutoffpoint <- boxplot.stats(rawdata$price)$out %>%\n",
        "  min()\n",
        "cutoffpoint\n",
        "\n",
        "cleandata_price <- rawdata %>% \n",
        "  filter (price != 0 & !is.na(price) & price <= cutoffpoint)\n",
        "\n",
        "count(cleandata_price)/count(rawdata)\n",
        "\n",
        "head(cleandata_price)\n",
        "names(cleandata_price)\n",
        "summary(cleandata_price)\n",
        "\n",
        "boxplot(cleandata_price$price)\n",
        "\n",
        "priceboxplot <- ggplot(data=cleandata_price, aes(y=price)) +\n",
        "  geom_boxplot(outlier.colour = \"blue\", outlier.shape = 1)\n",
        "\n",
        "\n",
        "ggplotly(priceboxplot)\n",
        "\n",
        "qplot(cleandata_price$price)\n",
        "\n",
        "ggplot(data=cleandata_price, aes(x=price)) +\n",
        "  geom_histogram(binwidth =1000) \n",
        "\n",
        "\n",
        "# Trading comparison by manufacturer\n",
        "\n",
        "manudata<-rawdata %>%\n",
        "           drop_na(manufacturer) %>% \n",
        "           ggplot()+\n",
        "           geom_bar(aes(x=fct_infreq(manufacturer)),stat =\"count\")+\n",
        "           coord_flip()\n",
        "\n",
        "ggplotly(manudata)\n",
        "\n",
        "# Comparison of Price by manufacturer\n",
        "\n",
        "price_manu<- cleandata_price %>%\n",
        "                 drop_na(manufacturer) %>% \n",
        "                 group_by(manufacturer) %>% \n",
        "                 filter(n() >= 2000 )\n",
        "  \n",
        "pm <-ggplot(data=price_manu,mapping=aes(x=price, colour = manufacturer, fill = manufacturer)) + \n",
        " geom_histogram(aes(y=..density..), alpha=0.5,position=\"identity\")+\n",
        " geom_density(alpha=.2)\n",
        " pm + facet_wrap(manufacturer ~ .)\n",
        " \n",
        "                  \n",
        "# Trading by state\n",
        "\n",
        "cars_state <- rawdata %>% \n",
        "    mutate(state = str_sub(city,-2,-1)) %>%\n",
        "    group_by(state) %>%\n",
        "    ggplot() +\n",
        "    geom_bar(aes(x=fct_infreq(state)),stat =\"count\")\n",
        "\n",
        "ggplotly(cars_state)\n",
        "  \n",
        "\n",
        "# Trading considering cylinders\n",
        "rawdata %>% \n",
        "  drop_na(cylinders) %>% \n",
        "  group_by(cylinders) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(cylinders)),stat =\"count\")\n",
        "\n",
        "\n",
        "# Trading considering fuel\n",
        "rawdata %>% \n",
        "  drop_na(fuel) %>% \n",
        "  group_by(fuel) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(fuel)),stat =\"count\")\n",
        "\n",
        "# Trading considering odometer\n",
        "cleandata_price %>% \n",
        "  drop_na(odometer) %>% \n",
        "  ggplot(aes(x=odometer,y=price)) +\n",
        "  geom_boxplot()\n",
        "\n",
        "# Trading considering transmission\n",
        "rawdata %>% \n",
        "  drop_na(transmission) %>% \n",
        "  group_by(transmission) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(transmission)),stat =\"count\")\n",
        "\n",
        "# Trading considering drive\n",
        "rawdata %>% \n",
        "  drop_na(drive) %>% \n",
        "  group_by(drive) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(drive)),stat =\"count\")\n",
        "\n",
        "# Trading considering size\n",
        "rawdata %>% \n",
        "  drop_na(size) %>% \n",
        "  group_by(size) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(size)),stat =\"count\")\n",
        "\n",
        "# Trading considering type\n",
        "rawdata %>% \n",
        "  drop_na(type) %>% \n",
        "  group_by(type) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(type)),stat =\"count\")\n",
        "\n",
        "# Trading considering type\n",
        "rawdata %>% \n",
        "  drop_na(paint_color) %>% \n",
        "  group_by(paint_color) %>%\n",
        "  ggplot() +\n",
        "  geom_bar(aes(x=fct_infreq(paint_color)),stat =\"count\")\n",
        "\n",
        "# Model development \n",
        "cleandata_model<-lm(data=cleandata_price,price ~ city + manufacturer + condition + cylinders+ fuel+ odometer+ transmission+ drive + size + type + paint_color)\n",
        "summary(cleandata_model)\n",
        "\n",
        "view(cleandata_model)\n",
        "dev.off()\n",
        "##################################################################################\n",
        "\n",
        "\n",
        "# # Trading considering the lat and long\n",
        "# \n",
        "# \n",
        "# vehiclemap<-map_data('state')\n",
        "# \n",
        "#   ggplot()+\n",
        "#   geom_polygon(data=vehiclemap,aes(x=long, y=lat, group = group),color=\"white\", fill=\"grey28\")+\n",
        "#   geom_point(data=rawdata, aes(x=long,y=lat),alpha = .5)\n",
        "# \n",
        "# # \n",
        "\n",
        "library(GGally)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# finaldata %>% \n",
        "#   group_by(manufacturer) %>%\n",
        "#   summarise(Count = n()) %>%\n",
        "#   ggplot(aes(reorder(manufacturer, Count),count)) +\n",
        "#   geom_bar(stat = \"identity\") + \n",
        "#   coord_flip()\n",
        "\n",
        "finaldata %>% \n",
        "     group_by(manufacturer) %>%\n",
        "  #   summarise(Count = n())\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# hist(mydata$price)\n",
        "# boxplot(mydata$price)\n",
        "# findout<- boxplot.stats(mydata$price)\n",
        "# min(findout$out)\n",
        "\n",
        "## the majority trading is below 38905 USD, so we focus our interest on the trading dataset that are below 38905 USD ##\n",
        "#mydata2<- mydata %>% \n",
        "#  filter(mydata$price is.na & mydata$price != 0 )\n",
        "\n",
        "# mydata3<- mydata %>%\n",
        "#                  filter(mydata$price <38905 & mydata$price != 0 )\n",
        "# boxplot(mydata3$price)\n",
        "# hist(mydata3$price,breaks= 500)\n",
        "# nrow(mydata3)/nrow(mydata)*100\n",
        "\n",
        "## our dataset in consideration will be the mydata3 dataset ##\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}